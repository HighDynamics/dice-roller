{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["rollDice","sides","Math","floor","random","DFour","props","useState","roll","setRoll","class","className","onClick","DSix","id","DEight","DTen","DTwelve","DTwenty","DOneHundred","Totals","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAGA,SAASA,EAASC,GAChB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAAU,EAEzD,SAASI,EAAMC,GAAO,IAAD,EACKC,mBAAS,MADd,mBACZC,EADY,KACNC,EADM,KAEnB,OACE,yBAAKC,MAAM,YACT,0BAAMC,UAAU,YAAhB,UACA,4BAAQC,QAAS,kBAAMH,EAAQT,EAAS,MAAxC,KACA,yBAAKU,MAAM,QAAQF,IAIzB,SAASK,EAAKP,GAAO,IAAD,EACMC,mBAAS,MADf,mBACXC,EADW,KACLC,EADK,KAElB,OACE,yBAAKC,MAAM,YACT,4BAAQI,GAAG,OAAOF,QAAS,kBAAMH,EAAQT,EAAS,MAAlD,KACA,yBAAKU,MAAM,QAAQF,IAIzB,SAASO,EAAOT,GAAO,IAAD,EACIC,mBAAS,MADb,mBACbC,EADa,KACPC,EADO,KAEpB,OACE,yBAAKC,MAAM,YACT,4BAAQE,QAAS,kBAAMH,EAAQT,EAAS,MAAxC,KACA,yBAAKU,MAAM,QAAQF,IAIzB,SAASQ,EAAKV,GAAO,IAAD,EACMC,mBAAS,MADf,mBACXC,EADW,KACLC,EADK,KAElB,OACE,yBAAKC,MAAM,YACT,4BAAQE,QAAS,kBAAMH,EAAQT,EAAS,OAAxC,MACA,yBAAKU,MAAM,QAAQF,IAIzB,SAASS,EAAQX,GAAO,IAAD,EACGC,mBAAS,MADZ,mBACdC,EADc,KACRC,EADQ,KAErB,OACE,yBAAKC,MAAM,YACT,4BAAQE,QAAS,kBAAMH,EAAQT,EAAS,OAAxC,MACA,yBAAKU,MAAM,QAAQF,IAIzB,SAASU,EAAQZ,GAAO,IAAD,EACGC,mBAAS,MADZ,mBACdC,EADc,KACRC,EADQ,KAErB,OACE,yBAAKC,MAAM,YACT,0BAAMC,UAAU,WAAhB,UACA,4BAAQG,GAAG,UAAUF,QAAS,kBAAMH,EAAQT,EAAS,OAArD,MACA,yBAAKU,MAAM,QAAQF,IAIzB,SAASW,EAAYb,GAAO,IAAD,EACDC,mBAAS,MADR,mBAClBC,EADkB,KACZC,EADY,KAEzB,OACE,yBAAKC,MAAM,YACT,4BAAQI,GAAG,cAAcF,QAAS,kBAAMH,EAAQT,EAAS,QAAzD,OACA,yBAAKU,MAAM,QAAQF,IAIzB,SAASY,EAAOd,GACd,OACE,yBAAKQ,GAAG,UAAR,WAsBWO,MAjBf,WACE,OACE,oCACE,kBAACD,EAAD,MACA,yBAAKN,GAAG,eACN,kBAACI,EAAD,MACA,kBAACD,EAAD,MACA,kBAACD,EAAD,MACA,kBAACD,EAAD,MACA,kBAACF,EAAD,MACA,kBAACR,EAAD,MACA,kBAACc,EAAD,SC7EYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.66cfa741.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction rollDice(sides){\n  return Math.floor(Math.random() * Math.floor(sides)) + 1\n}\nfunction DFour(props){\n  const [roll, setRoll] = useState(null);\n  return(\n    <div class='diceItem'>\n      <span className='triangle'>&#9650;</span>\n      <button onClick={() => setRoll(rollDice(4))}>4</button>\n      <div class='roll'>{roll}</div>\n    </div>\n  )\n}\nfunction DSix(props){\n  const [roll, setRoll] = useState(null);\n  return(\n    <div class='diceItem'>\n      <button id='dSix' onClick={() => setRoll(rollDice(6))}>6</button>\n      <div class='roll'>{roll}</div>\n    </div>\n  )\n}\nfunction DEight(props){\n  const [roll, setRoll] = useState(null);\n  return(\n    <div class='diceItem'>\n      <button onClick={() => setRoll(rollDice(8))}>8</button>\n      <div class='roll'>{roll}</div>\n    </div>\n  )\n}\nfunction DTen(props){\n  const [roll, setRoll] = useState(null);\n  return(\n    <div class='diceItem'>\n      <button onClick={() => setRoll(rollDice(10))}>10</button>\n      <div class='roll'>{roll}</div>\n    </div>\n  )\n}\nfunction DTwelve(props){\n  const [roll, setRoll] = useState(null);\n  return(\n    <div class='diceItem'>\n      <button onClick={() => setRoll(rollDice(12))}>12</button>\n      <div class='roll'>{roll}</div>\n    </div>\n  )\n}\nfunction DTwenty(props){\n  const [roll, setRoll] = useState(null);\n  return(\n    <div class='diceItem'>\n      <span className='hexagon'>&#x2B22;</span>\n      <button id='dTwenty' onClick={() => setRoll(rollDice(20))}>20</button>\n      <div class='roll'>{roll}</div>\n    </div>\n  )\n}\nfunction DOneHundred(props){\n  const [roll, setRoll] = useState(null);\n  return(\n    <div class='diceItem'>\n      <button id=\"dOneHundred\" onClick={() => setRoll(rollDice(100))}>100</button>\n      <div class='roll'>{roll}</div>\n    </div>\n  )\n}\nfunction Totals(props){\n  return(\n    <div id='totals'>\n      display\n    </div>\n  )\n}\nfunction App(){\n  return(\n    <>\n      <Totals />\n      <div id='diceWrapper'>\n        <DTwenty />\n        <DTwelve />\n        <DTen />\n        <DEight />\n        <DSix />\n        <DFour />\n        <DOneHundred />\n      </div>\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}